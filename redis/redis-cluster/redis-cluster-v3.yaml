#
# Redis Cluster service
#
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "false"
  name: redis-cluster
  labels:
    app: redis-cluster
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: client
  - port: 16379
    targetPort: 16379
    name: gossip
  clusterIP: None
  #type: ClusterIP
  selector:
    app: redis-cluster
---
#
# Redis configuration file for clustered mode
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-config
data:
  redis.conf: |+
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 15000
    cluster-config-file /data/nodes.conf
    cluster-migration-barrier 1 
    appendonly yes
    # Other cluster members need to be able to connect
    protected-mode no
#
# A script to bootstrap Stateful Set members as they initialize
# TODO: Move this logic into a separate Docker image. We shouldn't be doing this kind of hackery here.
#
  bootstrap-pod.sh: |+
    #!/bin/bash
    set -ex
    # Find which member of the Stateful Set this pod is running
    # e.g. "redis-cluster-0" -> "0"
    PET_ORDINAL=$(cat /etc/podinfo/pod_name | rev | cut -d- -f1)
    redis-server /conf/redis.conf &
    # Discover peers
    wget https://storage.googleapis.com/kubernetes-release/pets/peer-finder -O /bin/peer-finder
    chmod u+x /bin/peer-finder
    peer-finder -on-start 'tee > /conf/initial_peers' -service redis-cluster -ns $POD_NAMESPACE
    # TODO: Wait until redis-server process is ready
    sleep 1

    if [ $PET_ORDINAL != "0" ]; then
      FIRST_IP=$(perl -MSocket -e 'print inet_ntoa(scalar(gethostbyname("redis-cluster-0.redis-cluster.db.svc.cluster.local")))')
      redis-cli cluster meet $FIRST_IP 6379
    fi
      
    ISMASTER=$[${PET_ORDINAL}%2]
    if [ ${ISMASTER} -eq 0 ]; then
      # The first member of the cluster should control all slots initially
        a=${PET_ORDINAL}
        count=$[${REPLICAS_COUNT}/2]
        slots=16383
        slots_range=$[${slots}/${count}]
        b_slots=$[${a}/2*${slots_range}]
        if [ ${b_slots} -gt 0 ]; then
          b_slots=$[${b_slots}+${a}/2]
        fi
        e_slots=$[${b_slots}+${slots_range}]
        if [ ${e_slots} -gt ${slots}  ]; then
          e_slots=${slots}
        fi
        echo "master" ${b_slots} ${e_slots}
        #cluster_cmd="cluster addslots "'$('"seq ${b_slots} ${e_slots}"')'
        redis-cli cluster addslots $(seq ${b_slots} ${e_slots})
        #redis-cli ${cluster_cmd}
    else
      # Other members of the cluster join as slaves
      # TODO: Get list of peers using the peer finder using an init container
      #PEER_IP=$(perl -MSocket -e 'print inet_ntoa(scalar(gethostbyname("redis-cluster-0.redis-cluster.db.svc.cluster.local")))')
      #redis-cli cluster meet $PEER_IP 6379
      sleep 1
      #echo redis-cli --csv cluster slots
      #redis-cli --csv cluster slots
      # Become the slave of a random master node
      MASTER_ID=$(redis-cli --csv cluster slots | cut -d, -f 5 | sed -e 's/^"//'  -e 's/"$//')
      redis-cli cluster replicate $MASTER_ID
    fi
    wait
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: redis-cluster
spec:
  serviceName: redis-cluster
  replicas: 6
  template:
    metadata:
      labels:
        app: redis-cluster
      annotations:
        # NOTE: Init container must be idempotent
        # Add a baked-in Redis config file that enables cluster mode
        #pod.alpha.kubernetes.io/init-containers: '[
        #]'
    spec:
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: init-redis
        image: redis:3.2.1
        command:
        - bash
        - "-c"
        - |
          set -ex
          cp /mnt/config-map/redis.conf /mnt/conf/
          cp /mnt/config-map/bootstrap-pod.sh /mnt/conf/
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf
        - name: config-map
          mountPath: /mnt/config-map
      #hostNetwork: true
      containers:
      - name: redis-cluster
        image: redis:3.2.1
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        command:
        - bash
        args:
        - /conf/bootstrap-pod.sh
        # Ensure that Redis is online before initializing the next node.
        # TODO: Test that the cluster node is init'd properly.
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 15
          timeoutSeconds: 5

        # Mark a node as down if Redis server stops running
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 20
          periodSeconds: 3
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: REPLICAS_COUNT
          value: "6"   
        volumeMounts:
        - name: conf
          mountPath: /conf
        - name: podinfo
          mountPath: /etc/podinfo
          readOnly: false
        - name: dataredis
          mountPath: /data
          readOnly: false  
      volumes:
      - name: conf
        emptyDir: {}  
      # Insert our pre-baked Redis configuration file into /conf/redis.conf
      - name: config-map
        configMap:
          name: redis-cluster-config
          items: 
          - key: redis.conf
            path: redis.conf
          - key: bootstrap-pod.sh  # TODO: Move this or extract it into its own Docker image
            path: bootstrap-pod.sh
      # The init container will use this info to find cluster peers
      - name: podinfo
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
            - path: "annotations"
              fieldRef:
                fieldPath: metadata.annotations
            - path: "pod_name"
              fieldRef:
                fieldPath: metadata.name
            - path: "pod_namespace"
              fieldRef:
                fieldPath: metadata.namespace
  volumeClaimTemplates:
  - metadata:
      name: dataredis
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Mi              

